{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPJN0gez8SE1NYKvAbYbx7U",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ik339/NTU-python/blob/main/day%205%20and%206\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bVDX7RgJllhc",
        "outputId": "86f95c0d-8a06-41ff-d40e-a3ae3721d737"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello\n",
            "hello\n",
            "hello\n"
          ]
        }
      ],
      "source": [
        "stuff=list()\n",
        "stuff.append(\"hi\") #to input into a list\n",
        "stuff.append(\"hey\") \n",
        "stuff.append(\"hello\") \n",
        "stuff.append(\"hiii\") \n",
        "stuff.sort()\n",
        "\n",
        "print (stuff[0])    #different way to ask for an output\n",
        "print (stuff.__getitem__(0))\n",
        "print (list.__getitem__(stuff,0))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Dog:\n",
        "\n",
        "    def __init__(self, name):\n",
        "        self.name = name\n",
        "        self.tricks = []\n",
        "\n",
        "    def updateTricks(self, trick):\n",
        "        self.tricks.append(trick)\n",
        "\n",
        "    def __str__(self):\n",
        "        return f'Dog(name = {self.name}, tricks = {str(self.tricks)})'"
      ],
      "metadata": {
        "id": "H6cRUsfSqaev"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#teachers answer. 16.15 python for everyone. \n",
        "class Dog:\n",
        "\n",
        "    def __init__(self, name):\n",
        "        self.name = name\n",
        "        self.tricks = []    # creates a new empty list for each dog\n",
        "\n",
        "    def updateTricks(self, trick):\n",
        "        self.tricks.append(trick)\n",
        "\n",
        "    def __str__(self):\n",
        "        return f'Dog(name = {self.name}, tricks = {str(self.tricks)})'\n",
        "\n",
        "spot = Dog('Spot')   #dogs anme spot but made it an object named spot. \n",
        "spot.updateTricks('spin') #list\n",
        "spot.updateTricks('sit')\n",
        "print(spot.tricks)#prints list\n",
        "print(spot)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dcZfhICErhwH",
        "outputId": "c34e6f9e-3391-4d5c-ed0a-c392ad394483"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['spin', 'sit']\n",
            "Dog(name = Spot, tricks = ['spin', 'sit'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "?\n",
        "class Book:\n",
        "\n",
        "    def __init__(self, title, author):\n",
        "        self.title = title\n",
        "        self.author = author\n",
        "\n",
        "    def _str_(self):\n",
        "      return f\"your book is (self.title) by (self.author)\"\n",
        "\n",
        "book = Book(\"The Odyssey\", \"Homer\")\n",
        "print(book)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QkbrYwrEuufw",
        "outputId": "7f03889e-47a8-488d-c616-4171d9077513"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<__main__.Book object at 0x7f80df621410>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#see the errors?\n",
        "class Book:\n",
        "\n",
        "    def __init__(self,title, author):\n",
        "        self.title = title\n",
        "        self.author = author\n",
        "    def __str__(self):\n",
        "        return f(\"Your book is {title} by {author}\")\n",
        "\n",
        "book = book (\"The Odyssey\", \"Homer\")\n",
        "print(book)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "E95ItNC4wAD1",
        "outputId": "6bdf56cc-9283-4448-aa1c-4d9013ab1c7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-16-301d7a4f710b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      8\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Your book is {title} by {author}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mbook\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbook\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"The Odyssey\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Homer\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbook\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: 'Book' object is not callable"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Chapter 8, Challenge 1. Critter Caretaker\n",
        "class Critter(object): #1class\n",
        "    \"\"\"A virtual pet\"\"\"\n",
        "    def __init__(self, name, hunger = 0, boredom = 0):\n",
        "        self.name = name\n",
        "        self.hunger = hunger\n",
        "        self.boredom = boredom\n",
        "\n",
        "    def __pass_time(self):\n",
        "        self.hunger += 1\n",
        "        self.boredom += 1\n",
        "\n",
        "    @property\n",
        "    def mood(self):\n",
        "        unhappiness = self.hunger + self.boredom\n",
        "        if unhappiness < 5:\n",
        "            m = 'happy'\n",
        "        elif 5 <= unhappiness <= 10:\n",
        "            m = 'OK'\n",
        "        elif 11 <= unhappiness <= 15:\n",
        "            m = 'frustrated'\n",
        "        else:\n",
        "            m = 'mad'\n",
        "        return m\n",
        "\n",
        "    def talk(self):\n",
        "        print(\"I'm\", self.name, \"and I feel\", self.mood, \"now.\\n\")\n",
        "        self.__pass_time()\n",
        "\n",
        "    def eat(self, food = 4):\n",
        "        print(\"Brrruppp. Thank you.\")\n",
        "        self.hunger -= food\n",
        "        if self.hunger < 0:\n",
        "            self.hunger = 0\n",
        "        self.__pass_time()\n",
        "\n",
        "    def play(self, fun = 4):\n",
        "        print(\"Wheeee!\")\n",
        "        self.boredom -= fun\n",
        "        if self.boredom < 0:\n",
        "            self.boredom = 0\n",
        "        self.__pass_time()\n",
        "\n",
        "def main(): #method\n",
        "    crit_name = input(\"What do you want to name your critter?: \")\n",
        "    crit = Critter(crit_name)\n",
        "    choice = None\n",
        "    while choice != '0':\n",
        "        print(\"\"\"\\t\\tCritter Caretaker\n",
        "        0 - Quit\n",
        "        1 - Listen to your critter\n",
        "        2 - Feed your critter\n",
        "        3 - Play with your critter\\n\"\"\")\n",
        "\n",
        "        choice = input(\"Choice: \")\n",
        "        print()\n",
        "\n",
        "        # exit\n",
        "        if choice == \"0\":\n",
        "            print(\"Goodbye.\")\n",
        "\n",
        "        # listen to your critter\n",
        "        elif choice == \"1\":\n",
        "            crit.talk()\n",
        "\n",
        "        # feed your critter\n",
        "        elif choice == \"2\":\n",
        "            food = int(input(\"How much food would you like to give? Give value \"\n",
        "                         \"between 1 and 6: \"))\n",
        "            while not (food < 6 and food > 1):\n",
        "                print(\"That was an invalid choice.\")\n",
        "                food = int(input(\"How much food would you like to give? Give value \"\n",
        "                         \"between 1 and 6: \"))\n",
        "            crit.eat()\n",
        "\n",
        "        # play with your critter\n",
        "        elif choice == \"3\":\n",
        "            fun = int(input(\"How long would you like to play? Give value \"\n",
        "                         \"between 1 and 6: \"))\n",
        "            while not (fun < 6 and fun > 1):\n",
        "                print(\"That was an invalid choice.\")\n",
        "                fun = int(input(\"How long would you like to play? Give value \"\n",
        "                         \"between 1 and 6: \"))\n",
        "            crit.play()\n",
        "\n",
        "        # some unknown choice\n",
        "        else:\n",
        "            print(\"\\nSorry, but\", choice, \"isn't a valid choice.\")\n",
        "\n",
        "main()\n",
        "(\"\\n\\nPress the enter key to exit.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 705
        },
        "id": "eRq-_zZDwR_p",
        "outputId": "ea0badf0-1d99-4349-a2a2-758e03f95142"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "What do you want to name your critter?: hi\n",
            "\t\tCritter Caretaker\n",
            "        0 - Quit\n",
            "        1 - Listen to your critter\n",
            "        2 - Feed your critter\n",
            "        3 - Play with your critter\n",
            "\n",
            "Choice: 4\n",
            "\n",
            "\n",
            "Sorry, but 4 isn't a valid choice.\n",
            "\t\tCritter Caretaker\n",
            "        0 - Quit\n",
            "        1 - Listen to your critter\n",
            "        2 - Feed your critter\n",
            "        3 - Play with your critter\n",
            "\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-18-077bb90aaf71>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     92\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nSorry, but\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mchoice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"isn't a valid choice.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 94\u001b[0;31m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     95\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"\\n\\nPress the enter key to exit.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-18-077bb90aaf71>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     57\u001b[0m         3 - Play with your critter\\n\"\"\")\n\u001b[1;32m     58\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m         \u001b[0mchoice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Choice: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    861\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    862\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 863\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    864\u001b[0m         )\n\u001b[1;32m    865\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    902\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    903\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 904\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    905\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    906\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#critter program\n"
      ],
      "metadata": {
        "id": "jvevvwvUQqxd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"# static method\")\n",
        "irina().korsak()     #interview questions?- how can you instantiate?\n",
        "a=irina(); a.korsak() \n",
        "\n",
        "#class method\n",
        "irina.korsak()\n",
        "a=irina;korsak()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 262
        },
        "id": "5EVKQwFXdKEQ",
        "outputId": "9a7a096a-f6f1-49c3-b1c8-644059a7dc5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "# static method\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-21-5e27e114a2e2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"# static method\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mirina\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkorsak\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m     \u001b[0;31m#interview questions?- how can you instantiate?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mirina\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkorsak\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#class method\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'irina' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#day6. lists\n",
        "\n",
        "fridge = [\"eggs\", \"bacon\", \"salad\", \"milk\", \"mayo\"]\n",
        "print(fridge)\n",
        "\n",
        "print(fridge[-2])\n",
        "\n",
        "fridge.append(\"celery\")\n",
        "fridge\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HVOu7P_AeBBL",
        "outputId": "ff51324a-4e13-4f40-e9f5-7b8786601631"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['eggs', 'bacon', 'salad', 'milk', 'mayo']\n",
            "milk\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['eggs', 'bacon', 'salad', 'milk', 'mayo', 'celery']"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#dict\n",
        "dict={'a1':\"moo\", '': , }"
      ],
      "metadata": {
        "id": "0uc3aI7SwrbX"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Trivia game that reads a plain text file\n",
        "\n",
        "import sys\n",
        "\n",
        "def open_file(file_name, mode):\n",
        "    \"\"\"Open a file.\"\"\"\n",
        "    try:\n",
        "        the_file = open(file_name, mode)\n",
        "    except IOError as e:\n",
        "        print(\"Unable to open the file\", file_name, \"Ending program.\\n\", e)\n",
        "        input(\"\\n\\nPress the enter key to exit.\")\n",
        "        sys.exit()\n",
        "    else:\n",
        "        return the_file\n",
        "\n",
        "def next_line(the_file):\n",
        "    \"\"\"Return next line from the trivia file, formatted.\"\"\"\n",
        "    line = the_file.readline()\n",
        "    line = line.replace(\"/\", \"\\n\")\n",
        "    return line\n",
        "\n",
        "def next_block(the_file):\n",
        "    \"\"\"Return the next block of data from the trivia file.\"\"\"\n",
        "    category = next_line(the_file)\n",
        "    \n",
        "    question = next_line(the_file)\n",
        "    \n",
        "    answers = []\n",
        "    for i in range(4):\n",
        "        answers.append(next_line(the_file))\n",
        "        \n",
        "    correct = next_line(the_file)\n",
        "    if correct:\n",
        "        correct = correct[0]\n",
        "        \n",
        "    explanation = next_line(the_file) \n",
        "\n",
        "    return category, question, answers, correct, explanation\n",
        "\n",
        "def welcome(title):\n",
        "    \"\"\"Welcome the player and get his/her name.\"\"\"\n",
        "    print(\"\\t\\tWelcome to Trivia Challenge!\\n\")\n",
        "    print(\"\\t\\t\", title, \"\\n\")\n",
        " \n",
        "def main():\n",
        "    trivia_file = open_file(\"trivia.txt\", \"r\")\n",
        "    title = next_line(trivia_file)\n",
        "    welcome(title)\n",
        "    score = 0\n",
        "\n",
        "    # get first block\n",
        "    category, question, answers, correct, explanation = next_block(trivia_file)\n",
        "    while category:\n",
        "        # ask a question\n",
        "        print(category)\n",
        "        print(question)\n",
        "        for i in range(4):\n",
        "            print(\"\\t\", i + 1, \"-\", answers[i])\n",
        "\n",
        "        # get answer\n",
        "        answer = input(\"What's your answer?: \")\n",
        "\n",
        "        # check answer\n",
        "        if answer == correct:\n",
        "            print(\"\\nRight!\", end=\" \")\n",
        "            score += 1\n",
        "        else:\n",
        "            print(\"\\nWrong.\", end=\" \")\n",
        "        print(explanation)\n",
        "        print(\"Score:\", score, \"\\n\\n\")\n",
        "\n",
        "        # get next block\n",
        "        category, question, answers, correct, explanation = next_block(trivia_file)\n",
        "\n",
        "    trivia_file.close()\n",
        "\n",
        "    print(\"That was the last question!\")\n",
        "    print(\"You're final score is\", score)\n",
        " \n",
        "main()  \n",
        "input(\"\\n\\nPress the enter key to exit.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "id": "7cRm8act1Lt3",
        "outputId": "6e39111a-eec1-4c0a-b15e-d49c4a60d369"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unable to open the file trivia.txt Ending program.\n",
            " [Errno 2] No such file or directory: 'trivia.txt'\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-13-94f23fb93b25>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     78\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"You're final score is\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscore\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\n\\nPress the enter key to exit.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-13-94f23fb93b25>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m     \u001b[0mtrivia_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"trivia.txt\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"r\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m     \u001b[0mtitle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrivia_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m     \u001b[0mwelcome\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-13-94f23fb93b25>\u001b[0m in \u001b[0;36mopen_file\u001b[0;34m(file_name, mode)\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mIOError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Unable to open the file\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfile_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Ending program.\\n\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m         \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\n\\nPress the enter key to exit.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m         \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    861\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    862\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 863\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    864\u001b[0m         )\n\u001b[1;32m    865\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    902\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    903\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 904\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    905\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    906\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ]
    }
  ]
}